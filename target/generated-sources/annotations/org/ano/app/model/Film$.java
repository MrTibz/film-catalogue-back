package org.ano.app.model;

import com.speedment.jpastreamer.field.ComparableField;
import com.speedment.jpastreamer.field.ReferenceField;
import com.speedment.jpastreamer.field.ShortField;
import com.speedment.jpastreamer.field.StringField;
import com.speedment.jpastreamer.field.exception.IllegalJavaBeanException;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.List;

/**
 * The generated base for entity {@link Film} representing entities of the
 * {@code film}-table in the database.
 * <p> This file has been automatically generated by JPAStreamer.
 * 
 * @author JPAStreamer
 */
public final class Film$ {
    
    /**
     * This Field corresponds to the {@link Film} field "replacement_cost".
     */
    public static final ComparableField<Film, BigDecimal> replacement_cost = ComparableField.create(
        Film.class,
        "replacement_cost",
        film -> {throw new IllegalJavaBeanException(Film.class, "replacement_cost");},
        false
    );
    /**
     * This Field corresponds to the {@link Film} field "category".
     */
    public static final ReferenceField<Film, Category> category = ReferenceField.create(
        Film.class,
        "category",
        Film::getCategory,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field "release_year".
     */
    public static final ComparableField<Film, Short> release_year = ComparableField.create(
        Film.class,
        "release_year",
        film -> {throw new IllegalJavaBeanException(Film.class, "release_year");},
        false
    );
    /**
     * This Field corresponds to the {@link Film} field "actors".
     */
    public static final ReferenceField<Film, List<Actor>> actors = ReferenceField.create(
        Film.class,
        "actors",
        Film::getActors,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field "filmId".
     */
    public static final ShortField<Film> filmId = ShortField.create(
        Film.class,
        "filmId",
        Film::getFilmId,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field "language_id".
     */
    public static final ShortField<Film> language_id = ShortField.create(
        Film.class,
        "language_id",
        film -> {throw new IllegalJavaBeanException(Film.class, "language_id");},
        false
    );
    /**
     * This Field corresponds to the {@link Film} field "rental_rate".
     */
    public static final ComparableField<Film, BigDecimal> rental_rate = ComparableField.create(
        Film.class,
        "rental_rate",
        film -> {throw new IllegalJavaBeanException(Film.class, "rental_rate");},
        false
    );
    /**
     * This Field corresponds to the {@link Film} field "rental_duration".
     */
    public static final ShortField<Film> rental_duration = ShortField.create(
        Film.class,
        "rental_duration",
        film -> {throw new IllegalJavaBeanException(Film.class, "rental_duration");},
        false
    );
    /**
     * This Field corresponds to the {@link Film} field "original_language_id".
     */
    public static final ComparableField<Film, Short> original_language_id = ComparableField.create(
        Film.class,
        "original_language_id",
        film -> {throw new IllegalJavaBeanException(Film.class, "original_language_id");},
        false
    );
    /**
     * This Field corresponds to the {@link Film} field "length".
     */
    public static final ComparableField<Film, Short> length = ComparableField.create(
        Film.class,
        "length",
        Film::getLength,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field "description".
     */
    public static final StringField<Film> description = StringField.create(
        Film.class,
        "description",
        Film::getDescription,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field "rating".
     */
    public static final ReferenceField<Film, Object> rating = ReferenceField.create(
        Film.class,
        "rating",
        Film::getRating,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field "last_update".
     */
    public static final ComparableField<Film, Timestamp> last_update = ComparableField.create(
        Film.class,
        "last_update",
        film -> {throw new IllegalJavaBeanException(Film.class, "last_update");},
        false
    );
    /**
     * This Field corresponds to the {@link Film} field "special_features".
     */
    public static final ReferenceField<Film, Object> special_features = ReferenceField.create(
        Film.class,
        "special_features",
        film -> {throw new IllegalJavaBeanException(Film.class, "special_features");},
        false
    );
    /**
     * This Field corresponds to the {@link Film} field "title".
     */
    public static final StringField<Film> title = StringField.create(
        Film.class,
        "title",
        Film::getTitle,
        false
    );
}